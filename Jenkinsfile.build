def mapServices = [:] // Initialize empty map

pipeline{
	agent { 
		node { 
			label 'DEVLINSLAVES'			
		} 
	}
    environment{
		HOME = '.'
        DEFAULT_MAVEN = 'Maven 3.6.0'
		DEFAULT_JDK='openjdk_11-hotspot' 
		MAVEN_SETTINGS = 'NBS-Maven-Settings'
		TRUSTED_USER = 'dtruser'
		DTRUSTED_USER_CREDENTIALS = credentials("${TRUSTED_USER}")
		harborRepoCredential = 'HARBOR_ROBOT' 
		MAVEN_REPO = '/opt/maven/.repository'
		SCM_URL='tfshub.crifnet.com:8443/CRIF/CreditFlow_Delivery/_git/cff-nbs-core'
        SCM_CREDENTIALS_ID='tfsbuild'
		SCM_URL_FULL = "https://${SCM_URL}"
		DOCKER_PROJECT= "nbs"
		DOCKER_REGISTRY = "docker-registry.crifnet.com"
        DOCKER_REGISTRY_ENDPOINT="https://${DOCKER_REGISTRY}"
		FFY_EXECUTABLE = "$WORKSPACE/devops/Fortify/ScaBatchFortifyA2A.exe"
		awsCredential = 'AWS_ROBOT'
        awsRegionId = 'eu-west-2'
        ecrRepoURL="465711391114.dkr.ecr.eu-west-2.amazonaws.com/nbs"
		harborRepoURL="${DOCKER_REGISTRY}/${DOCKER_PROJECT}/"
    }

    parameters {
        gitParameter branchFilter: 'origin/(.*)', defaultValue: 'master', name: 'BRANCH', type: 'PT_BRANCH'
		booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Do you want to skip junit tests?')
		string(name: 'SERVICES', description: 'Select Docker Service: Select Docker Service: cff-brk-nbs-appdecision, cff-home-forwarder, cff-brk-nbs-frontend, cff-brk-nbs-redirect')
		string(name: 'TAG_NAME', description: 'Select TAG for docker-registry (only for production releases): ex. nbs-prd-*')
		//booleanParam(name: 'FORTIFY_SCAN', defaultValue: false, description: 'Do you want to perform a Fortify scan?')
		//string(name: 'FFY_REQUESTOR', defaultValue: 'cd435antscog', description: 'domain name of the requestor (must be enabled in SCA portal)')
		booleanParam(name: 'SONAR', defaultValue: false, description: 'Do you want to perform a SonarQube scan?')
        /*choice(name: 'BRICK_NAME', choices: [
            'cff-nbs-appdecision-brk','cff-nbs-redirect-brk','cff-home-forwarder','cff-nbs-frontend-brk'])*/
    }
    stages {		
		stage('Init') {
			steps {
				cleanWs()
				script {
					mapServices.put("cff-brk-nbs-appdecision","cff-brk-nbs-appdecision")
					mapServices.put("cff-brk-nbs-frontend","cff-brk-nbs-frontend")
					mapServices.put("cff-home-forwarder","cff-home-forwarder")
					mapServices.put("cff-brk-nbs-redirect","cff-brk-nbs-redirect")

					tag = 'latest'
					if ( ! params.TAG_NAME.isEmpty() ) {
                        tag = "${params.TAG_NAME}"
                    }

				}
				checkout([$class: 'GitSCM',
				userRemoteConfigs: [[credentialsId: "${SCM_CREDENTIALS_ID}", url: "${SCM_URL_FULL}"]],
				branches: [[name: "${params.BRANCH}"]],
				doGenerateSubmoduleConfigurations: false,
				extensions: [],
				submoduleCfg: []])
			}
		}

       stage('Build') {
            steps {
			
				withMaven(
					mavenSettingsConfig: "${MAVEN_SETTINGS}", 
					mavenLocalRepo: "${MAVEN_REPO}", 
					maven: "${DEFAULT_MAVEN}", 
					jdk: "${DEFAULT_JDK}",
					tempBinDir: '') {
				nodejs(nodeJSInstallationName: 'NODE_12.18.1', configId: 'NBSNpmrc') {
					withMaven(
						mavenSettingsConfig: "${MAVEN_SETTINGS}", 
						mavenLocalRepo: "${MAVEN_REPO}", 
						maven: "${DEFAULT_MAVEN}", 
						jdk: "${DEFAULT_JDK}",
							tempBinDir: '') {
								sh("mvn clean install -DskipTests=${SKIP_TESTS} -Dmaven.test.failure.ignore=true")
							}
				}
				}
		
            }
			}
					
		stage('Docker'){
			
			steps{
				
				script {
					docker.withRegistry(DOCKER_REGISTRY_ENDPOINT, harborRepoCredential) {					

						if (params.SERVICES == '') {
							mapServices.each { key, val ->
							
							if("$val"=='cff-home-forwarder'){
								dir("cff-home-forwarder"){
									sh (" chmod +x buildAndPush.sh")
									sh (" ./buildAndPush.sh ${tag}")
								}
							}
							else {
							withMaven(
								mavenSettingsConfig: "${MAVEN_SETTINGS}", 
								mavenLocalRepo: "${MAVEN_REPO}", 
								maven: "${DEFAULT_MAVEN}", 
								jdk: "${DEFAULT_JDK}",
									tempBinDir: '') {
										dir("$val") {
											sh("mvn -Dbranch.name=${tag} -Pdocker dockerfile:build dockerfile:push -Ddocker.skip=false")
										}
									}
							}
							}
						}else{
							def dockerServicesList = "${SERVICES}".split(',')
							dockerServicesList.each { item ->
							
							if(mapServices."${item}"=='cff-home-forwarder'){
								dir("cff-home-forwarder") {
									sh (" chmod +x buildAndPush.sh")
									sh (" ./buildAndPush.sh ${tag}")
								}
							}
							else {
								withMaven(
									mavenSettingsConfig: "${MAVEN_SETTINGS}", 
									mavenLocalRepo: "${MAVEN_REPO}", 
									maven: "${DEFAULT_MAVEN}", 
									jdk: "${DEFAULT_JDK}",
										tempBinDir: '') {
											dir(mapServices."${item}") {
												sh( "mvn -Dbranch.name=${tag} -Pdocker dockerfile:build dockerfile:push -Ddocker.skip=false")
											}
										}							
							}
							}
						}
					}
				}
				
			}
		}

		
		stage('Sonar'){

			when {                
					expression { params.SONAR }
				} 	

			steps{		

				withMaven(
					mavenSettingsConfig: "${MAVEN_SETTINGS}", 
					mavenLocalRepo: "${MAVEN_REPO}", 
					maven: "${DEFAULT_MAVEN}", 
					jdk: "${DEFAULT_JDK}",
                        tempBinDir: '') {     
							sh("mvn -Psonar,!npm verify -DskipTests=${SKIP_TESTS} -Dmaven.test.failure.ignore=true ")
                        }
                        
                withMaven(
					mavenSettingsConfig: "${MAVEN_SETTINGS}", 
					mavenLocalRepo: "${MAVEN_REPO}", 
					maven: "${DEFAULT_MAVEN}", 
					jdk: "${MVN_SONAR_JDK}",
                        tempBinDir: '') {       
                           sh("mvn -Psonar,!npm sonar:sonar")
                        }			
							     
				
			}
		}
		
		/*
		stage('Ensure AWS repo exists and get token') {
            when {
               expression {params.TAG_NAME != '' }
            }
			agent {
						docker {
							image 'docker-registry.crifnet.com/dockerhub/amazon/aws-cli:latest'
							registryUrl "https://$harborRepoURL"
							registryCredentialsId harborRepoCredential
							args '--entrypoint='
						}
				}

			steps{
				script {
			if (params.SERVICES == '') {
				mapServices.each { key, val ->
				def componentName = "${val}"
					
					withCredentials([aws(
						credentialsId: "${awsCredential}",
						accessKeyVariable: 'AWS_ACCESS_KEY_ID',
						secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {

						retry(3) {
							script {
								sh "aws ecr describe-repositories --repository-names ${componentName} --region ${env.awsRegionId} || aws ecr create-repository --repository-name ${componentName} --region ${env.awsRegionId}"
								ECR_TOKEN = sh (
									script:  "aws ecr get-login-password --region ${env.awsRegionId}",
									returnStdout: true
								).trim()
								}
							}
						}
					}
			}
			else{
				def dockerServicesList = "${SERVICES}".split(',')
				dockerServicesList.each { item ->
				def componentName = mapServices."${item}"								
					withCredentials([aws(
						credentialsId: "${awsCredential}",
						accessKeyVariable: 'AWS_ACCESS_KEY_ID',
						secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {

						retry(3) {
							script {
								sh "aws ecr describe-repositories --repository-names ${componentName} --region ${env.awsRegionId} || aws ecr create-repository --repository-name ${componentName}  --region ${env.awsRegionId}"
								ECR_TOKEN = sh (
									script:  "aws ecr get-login-password --region ${env.awsRegionId}",
									returnStdout: true
								).trim()
								
								}
							}
						}					
					}			
        		}
				}
			}
		}
		
		
		stage('Docker push on AWS ECR') {
            when {
               expression { params.TAG_NAME != ''}
            }
            steps{
                script {
					if (params.SERVICES == '') {
						mapServices.each { key, val ->
						def componentName = "${val}"

							sh """
								docker tag ${harborRepoURL}${componentName}:${tag} ${ecrRepoURL}/${componentName}:${tag}
								echo "${ECR_TOKEN}" | docker login --username AWS --password-stdin ${ecrRepoURL}
								docker push ${ecrRepoURL}/${componentName}:${tag}
							"""
						}
					}else{
						def dockerServicesList = "${SERVICES}".split(',')
						dockerServicesList.each { item ->
						def componentName = mapServices."${item}"	
							sh """
								docker tag ${harborRepoURL}${componentName}:${tag} ${ecrRepoURL}/${componentName}:${tag}
								echo "${ECR_TOKEN}" | docker login --username AWS --password-stdin ${ecrRepoURL}
								docker push ${ecrRepoURL}/${componentName}:${tag}
							"""
						}

                	}
            }
        }
		}
		*/
		/*stage('Fortify Check'){
            when{
                expression { params.FORTIFY_SCAN }
            }
			steps{
			    dir("crif-cff-kat-parent"){
				withMaven(
					mavenSettingsConfig: "${MAVEN_SETTINGS}", 
    				mavenLocalRepo: "${MAVEN_REPO}", 
					maven: "${DEFAULT_MAVEN}",
					jdk: "${DEFAULT_JDK}",
					tempBinDir: '') {
							bat "mvn package -Pfortify -DskipTests=true -Dmaven.test.failure.ignore=true"
				}
			  }
				bat "${FFY_EXECUTABLE} \"${PROJECT_NAME}\" \"target/${PROJECT_NAME}.zip\" ${params.FFY_REQUESTOR}"
			}
		}*/
			
		}
    
	



	post {
        always { 
            echo 'One way or another, I have finished'
        }
		success {
			mail( 
			to: 'a.scognamiglio@crif.com', subject: '[NBS-PIPELINE-BULD] - The check success :', 
			body: "Job Successful - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}")
		}
        failure {
			mail( 
			to: 'a.scognamiglio@crif.com', subject: '[NBS-PIPELINE-BULD] - The check failed :', 
			body: "Job Failed - \"${env.JOB_NAME}\" build: ${env.BUILD_NUMBER}\n\nView the log at:\n ${env.BUILD_URL}")
		}	
    }

	
}

